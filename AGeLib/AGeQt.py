# import builtins
# builtins.QtVersion = "PyQt5" # Options: "PyQt5", "PyQt6", "PySide2", "PySide6"

#global sUsePyQt5
#global sUseVersion
#sUsePyQt5 = True
#sUseVersion = 5
#try:
#    import AGeLibQtVersion
#    sUsePyQt5 = AGeLibQtVersion.sUsePyQt5
#except:
#    pass
#def UsePyQt5():
#    #print(sUsePyQt5)
#    return sUsePyQt5
#def UseVersion():
#    #print(sUsePyQt5)
#    return sUseVersion

#CRITICAL: print ALL import error messages to allow for debugging of import errors for installed but not found distribution!

import os, sys
import traceback
import builtins

# Add AGeLib's parent directory to the path so that it can be imported from anywhere.
# This is important for loading code generated by AGeToPy that relies on AGeLib's Qt bindings
if 'AGELIB_PARENT_PATH' not in os.environ:
    os.environ['AGELIB_PARENT_PATH'] = os.path.split(os.path.dirname(__file__))[0]
if os.environ['AGELIB_PARENT_PATH'] not in sys.path:
    sys.path.append(os.environ['AGELIB_PARENT_PATH'])



if 'QT_PLUGIN_PATH' in os.environ:
    QtPluginPath = os.environ['QT_PLUGIN_PATH']
else:
    QtPluginPath = ""
if 'QT_QPA_PLATFORM_PLUGIN_PATH' in os.environ:
    QtPlatformPluginPath = os.environ['QT_QPA_PLATFORM_PLUGIN_PATH']
else:
    QtPlatformPluginPath = ""

def setQtPluginPath(dirname):
    """
    This function adds the Qt plugins to the path. \n
    The plugins are normally already in the path but things like faulty installations
    and installations of multiple Qt distributions can lead to problems. \n
    The added paths should at least cover all anaconda installations. \n
    If the path is different on your system please inform me (Robin 'Astus' Albers) so that I can add it here.
    """
    #MAYBE: Do this in a loop so that more paths can be easily added.
    plugin_path1 = os.path.join(dirname, 'plugins')
    plugin_path2 = os.path.join(dirname, 'Qt', 'plugins')
    plugin_path3 = os.path.join(dirname,'..','..','..','Library', 'plugins')
    #print("plugin_path1",plugin_path1)
    #print("plugin_path2",plugin_path2)
    #print("plugin_path3",plugin_path3)
    plugin_path = QtPluginPath
    platform_plugin_path = QtPlatformPluginPath
    if os.path.exists(plugin_path1) and os.listdir(plugin_path1):
        if plugin_path != "": plugin_path += ";"
        plugin_path += plugin_path1
        if platform_plugin_path != "": platform_plugin_path += ";"
        platform_plugin_path += os.path.join(plugin_path1, 'platforms')
    if os.path.exists(plugin_path2) and os.listdir(plugin_path2):
        if plugin_path != "": plugin_path += ";"
        plugin_path += plugin_path2
        if platform_plugin_path != "": platform_plugin_path += ";"
        platform_plugin_path += os.path.join(plugin_path2, 'platforms')
    if os.path.exists(plugin_path3) and os.listdir(plugin_path3):
        if plugin_path != "": plugin_path += ";"
        plugin_path += plugin_path3
        if platform_plugin_path != "": platform_plugin_path += ";"
        platform_plugin_path += os.path.join(plugin_path3, 'platforms')
    os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = platform_plugin_path
    os.environ['QT_PLUGIN_PATH'] = plugin_path
    #os.environ['PATH'] += ";"+plugin_path+";"+platform_plugin_path
    return plugin_path
    #QApplication.addLibraryPath

if "PyQt5" in sys.argv:
    v = "PyQt5"
elif "PyQt6" in sys.argv:
    v = "PyQt6"
elif "PySide2" in sys.argv:
    v = "PySide2"
elif "PySide6" in sys.argv:
    v = "PySide6"
else:
    try:
        v = QtVersion # type: ignore
    except:
        v = False

if v: # If a specific Qt distribution is requested check if it can be imported
    if v == "PyQt5":
        try:
            import PyQt5
        except:
            print("Could not import ",v)
            traceback.print_exc()
            print("A valid Qt distribution will be chosen automatically")
            v = False
    elif v == "PyQt6":
        try:
            import PyQt6
        except:
            print("Could not import ",v)
            traceback.print_exc()
            print("A valid Qt distribution will be chosen automatically")
            v = False
    elif v == "PySide6":
        try:
            import PySide6
        except:
            print("Could not import ",v)
            traceback.print_exc()
            print("A valid Qt distribution will be chosen automatically")
            v = False
    elif v == "PySide2":
        try:
            import PySide2
        except:
            print("Could not import ",v)
            traceback.print_exc()
            print("A valid Qt distribution will be chosen automatically")
            v = False
    else:
        print("WARNING:",v,"is not a valid Qt distribution. It must be one of [PyQt5, PyQt6, PySide2, PySide6].\n  A valid Qt distribution will now be chosen automatically.")
        v = False

# If no specific Qt distribution is requested we or the requested one can not be imported we choose one
if not v: #REMINDER: PyQt6 should be preferred over PyQt5 as soon as QWebwidgets and MatPlotLib are supported... Or PySide6 once it supports Qsci (if ever...)
    try:
        import PyQt5
    except:
        v = False
    else:
        v = "PyQt5"
if not v:
    try:
        import PyQt6
    except:
        v = False
    else:
        v = "PyQt6"
if not v:
    try:
        import PySide6
    except:
        v = False
    else:
        v = "PySide6"
if not v:
    try:
        import PySide2
    except:
        v = False
    else:
        v = "PySide2"


try:
    if v == "PySide6":
        try:
            import PySide6
        except:
            pass
        PluginPath = setQtPluginPath(dirname = os.path.dirname(PySide6.__file__))
        from PySide6 import QtWidgets,QtCore,QtGui
        try:
            from PySide6 import QtWebEngineWidgets
        except:
            print("Could not import QtWebEngineWidgets")
            traceback.print_exc()
            QtWebEngineWidgetsImported = False
            QtWebEngineWidgets = None
        else:
            QtWebEngineWidgetsImported = True
        Qsci = None
        QSciImported = False
        pyqtSignal = QtCore.Signal
        pyqtProperty = QtCore.Property
        QtCore.pyqtSignal = QtCore.Signal
        QtCore.pyqtProperty = QtCore.Property
        QtWidgets.QAction = QtGui.QAction
        #QtWidgets.QApplication.exec = lambda self: QtWidgets.QApplication.exec_()
        QtWidgets.QApplication.exec = lambda self: self.exec_()
        QtWidgets.QApplication.addLibraryPath(PluginPath)
    elif v == "PySide2":
        try:
            import PySide2
        except:
            pass
        PluginPath = setQtPluginPath(os.path.dirname(PySide2.__file__))
        from PySide2 import QtWidgets,QtCore,QtGui
        try:
            from PySide2 import QtWebEngineWidgets
        except:
            QtWebEngineWidgets = sys.exc_info()
            QtWebEngineWidgetsImported = False
        else:
            QtWebEngineWidgetsImported = True
        Qsci = None
        QSciImported = False
        pyqtSignal = QtCore.Signal
        pyqtProperty = QtCore.Property
        QtCore.pyqtSignal = QtCore.Signal
        QtCore.pyqtProperty = QtCore.Property
        QtGui.QAction = QtWidgets.QAction
        QtWidgets.QApplication.exec = lambda self: QtWidgets.QApplication.exec_()
        QtWidgets.QApplication.addLibraryPath(PluginPath)
    elif v == "PyQt6":
        try:
            import PyQt6
        except:
            pass
        PluginPath = setQtPluginPath(os.path.dirname(PyQt6.__file__))
        QModules = ["QtWidgets","QtGui","QtCore","QtCore.Qt"]
        from PyQt6 import QtWidgets,QtCore,QtGui
        try:
            from PyQt6 import QtWebEngineWidgets
        except:
            QtWebEngineWidgets = sys.exc_info()
            QtWebEngineWidgetsImported = False
        else:
            QtWebEngineWidgetsImported = True
            QModules.append("QtWebEngineWidgets")
        try:
            from PyQt6 import Qsci
        except:
            Qsci = None
            QSciImported = False
        else:
            QSciImported = True
            QModules.append("Qsci")
        pyqtSignal = QtCore.pyqtSignal
        pyqtProperty = QtCore.pyqtProperty
        QtCore.Signal = QtCore.pyqtSignal
        QtCore.Property = QtCore.pyqtProperty
        QtWidgets.QAction = QtGui.QAction
        
        #region PyQt6 enums
        enumList = []
        for QModule in QModules:
            QModuleDir = []
            exec("QModuleDir.append(dir("+QModule+"))")
            QModuleDir = QModuleDir[0]
            for QModule2 in QModuleDir:
                if QModule2[0] != "_":
                    try:
                        exec("if '<enum \\'' in str("+QModule+"."+QModule2+"): enumList.append('"+QModule+"."+QModule2+"')")
                    except AttributeError:
                        pass
                    QModuleDir2 = []
                    exec("QModuleDir2.append(dir("+QModule+"."+QModule2+"))")
                    QModuleDir2 = QModuleDir2[0]
                    for i in QModuleDir2:
                        if i[0] != "_":
                            try:
                                exec("if '<enum \\'' in str("+QModule+"."+QModule2+"."+i+"): enumList.append('"+QModule+"."+QModule2+"."+i+"')")
                            except AttributeError:
                                pass
        import numbers
        import enum
        def __eq__(self, other):
            if self.__class__ is other.__class__:
                return enum.Enum.__eq__(self,other)
            try:
                return self.value == other.value
            except:
                pass
            try:
                if isinstance(other, numbers.Real):
                    return self.value == other
                if isinstance(other, str):
                    return self.name == other
            except:
                pass
            return NotImplemented
        def __or__(self, other):
            try:
                return self.value | other.value
            except:
                pass
            try:
                if isinstance(other, numbers.Real):
                    return self.value | other
                if isinstance(other, str):
                    return self.name | other
            except:
                pass
            return NotImplemented
        def __ror__(self, other):
            try:
                return other.value | self.value
            except:
                pass
            try:
                if isinstance(other, numbers.Real):
                    return other | self.value
                if isinstance(other, str):
                    return other | self.name
            except:
                pass
            return NotImplemented
        def __int__(self):
            return self.value
        for i in enumList:
            _enum = []
            exec("_enum.append(dir("+i+"))")
            exec("setattr("+i+",\"__eq__\",__eq__)")
            exec("setattr("+i+",\"__or__\",__or__)")
            exec("setattr("+i+",\"__ror__\",__ror__)")
            exec("setattr("+i+",\"__int__\",__int__)")
            #MAYBE: Add more of these if they are necessary
            _enum = _enum[0]
            for j in _enum:
                if j[0] != "_":
                    exec(i.rsplit(".",1)[0]+"."+j+" = "+i+"."+j)
        #endregion PyQt6 enums
        #region PyQt6 weirdness
        QtGui.QMouseEvent.globalPos = lambda self: QtGui.QMouseEvent.globalPosition(self).toPoint()
        QtGui.QMouseEvent.pos = lambda self: QtGui.QMouseEvent.position(self).toPoint()
        #endregion PyQt6 weirdness
        print("Warning! PyQt6 has fundamental api changes! I have tried some dark python magic to make everything compatible but there are some limits to this magic and I might have missed some things...")
        QtWidgets.QApplication.addLibraryPath(PluginPath)
    else: # QtVersion == "PyQt5":
        try:
            import PyQt5
        except:
            pass
        PluginPath = setQtPluginPath(os.path.dirname(PyQt5.__file__))
        from PyQt5 import QtWidgets,QtCore,QtGui
        try:
            from PyQt5 import QtWebEngineWidgets
        except:
            QtWebEngineWidgets = sys.exc_info()
            QtWebEngineWidgetsImported = False
        else:
            QtWebEngineWidgetsImported = True
        try:
            from PyQt5 import Qsci
        except:
            Qsci = None
            QSciImported = False
        else:
            QSciImported = True
        pyqtSignal = QtCore.pyqtSignal
        pyqtProperty = QtCore.pyqtProperty
        QtCore.Signal = QtCore.pyqtSignal
        QtCore.Property = QtCore.pyqtProperty
        QtGui.QAction = QtWidgets.QAction
        QtWidgets.QApplication.addLibraryPath(PluginPath)
except: #TODO: Try to import other Qt Distribution in case PyQt5 is not installed. After all Qt5 will only supported until 2023 and Qt6 will become more and more dominant. PyQt should still be preferred over PySide because of Qsci
    #CRITICAL: Print exceptions!
    print("Could not import ",v)
    traceback.print_exc()
    print("Trying to import PyQt5 instead")
    try:
        import PyQt5
    except:
        pass
    PluginPath = setQtPluginPath(os.path.dirname(PyQt5.__file__))
    from PyQt5 import QtWidgets,QtCore,QtGui
    try:
        from PyQt5 import QtWebEngineWidgets
    except:
        QtWebEngineWidgets = sys.exc_info()
        QtWebEngineWidgetsImported = False
    else:
        QtWebEngineWidgetsImported = True
    try:
        from PyQt5 import Qsci
    except:
        Qsci = None
        QSciImported = False
    else:
        QSciImported = True
    pyqtSignal = QtCore.pyqtSignal
    pyqtProperty = QtCore.pyqtProperty
    QtCore.Signal = QtCore.pyqtSignal
    QtCore.Property = QtCore.pyqtProperty
    QtWidgets.QApplication.addLibraryPath(PluginPath)
    #
    builtins.QtVersion = "PyQt5"
else:
    builtins.QtVersion = v

print(builtins.QtVersion,"loaded")

__all__ = [
           "QtCore",
           "QtWidgets",
           "QtGui",
           "Qsci",
           "QSciImported",
           "QtWebEngineWidgets",
           "QtWebEngineWidgetsImported",
           "pyqtSignal",
           "pyqtProperty",
           ]
